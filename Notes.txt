######################################################
# Author:         xFlowDev                           #
# Description:    Notes for developing a 2D RPG Game #
# Languange:      German                             #
######################################################

######################################################
# Im Text werden [Tags] benutzt,                     #
# um Bookmarks zu setzen.                            #
# [TODO] - Aufgabe die noch zu erledigen ist         #
# [NOTE] - Hinweis für später                        #
# [BUG]  - Bug der aufgetreten ist                   #
# [DONE] - Nachverfolgung für später                 #
######################################################

# [02.03.17]
Programmiersprache definitv C++

Jetzt kann ich es mir entweder richtig schwer machen oder ein bisschen einfacher einsteigen.
Ich könnte SFML benutzen oder OpenGL oder sogar Vulkan.

Am einfachsten wäre SFML zum jetzigen Standpunkt. Das nimmt mir einiges ab worum ich mich dann nicht mehr kümmern muss.
SFML bringt Graphics/Networking/Keyboard/Sound/Window. Darum müsste ich mich dann nicht selber kümmern.

OpenGL ist letztendlich nur für die Kommunikation mit der Grafik da.
Fenstererstellung wäre dann zum Beispiel mit GLFW, GLEW oder so zu machen.

Vulkan ist noch ein bisschen mehr lowlevel als OpenGL.
Dementsprechend noch schneller.
Für meinen Einsatz ein bisschen Overkill, aber irgendwo muss man ja anfangen, mit der API.

Shaderprogramming wird nötig, wenn ich OpenGL oder Vulkan nehme, fände ich aber gut.

Scriptsprache entweder Lua oder Python.
Ich tendiere mehr zu Lua, da Lua mehr bei Spielen zum Einsatz kommt.
# [02.03.17]

# [20.03.17]
Ich habe mich für SFML entschieden.
Weil ich SFML inzwischen ein wenig kenne.

Basis Setup gemacht, SFML-Library verlinkt und included.

Menu angefangen aufzubauen, drei bunte Buttons die aktuell noch nichts machen.
Aber ich habe die mit der Referenz des GameWindow gedrawt.
# [20.03.17]

# [23.03.17]
GameState wird als Pointer an die jeweilige Update Funktion übergeben.
In den Update Funktionen kann dann der GameState gesetzt werden und in Game wird dann das richtige gerendert und geupdatet.

Buttons funktionieren jetzt. Allerdings kann nur was passieren wenn der Play-Button gedrückt wird.

GameLoop auf 60 Updates pro Sekunde beschränken.
Draw kann öfter aufgerufen werden. Da nichts an der Spiel-Logik verändert wird.
Es kommt dann einfach nur flüßiger rüber.
[TODO] für später: Möglichkeit geben die FPS zu beschränken. Einfach als Übung.

[TODO] Restliche Screens implementieren, damit meine ich Options, Exit, Pause und was noch so anfällt.
[NOTE] Aktuell noch nicht nötig
# [23.03.17]

# [27.03.17]
GameLoop läuft jetzt mit ca 60 Updates pro Sekunde
irgendwas stimmt da aber noch nicht, die Schwankung dabei sind mir viel zu groß.
Denn zwischen 40 und 80 Updates/s ist alles dabei.
[TODO] Fixed TimeStep nochmal überprüfen

[TODO] Menü Buttons ordentlich mit Fonts und Highlight(Animation) wenn drüber gehovert wird.

GameScreen:
Objekte die ich erstellen muss
    - Map
    - Entitäten
        -- Spieler
        -- Gegner
        -- NPCs
    - Andere Objekte
        -- unzerstörbar
            --- Bäume
            --- Steine
        -- Zerstörbar
            --- Kisten
            --- Vasen
            --- usw

Jedes mal zufällig generierte Map. 
[TODO] Map generieren
Für prozedurale Map Generierung siehe: https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3 
# [27.03.17]

# [29.03.17]
[TODO] Error Handling implementieren
Welche wege gibt es da?
Was ist Best-Practice?
# [29.03.17]

# [30.03.17]
Dadurch das C++ alles instanziert sobald die Variable deklariert wird,
werden natürlich alle Konstruktoren aufgerufen und da ich die Initialisierung darin machen,
werden sofort beim Starten alle Ressourcen geladen.
Das muss ich verhindern und alles erst initialisieren wenn ich es benötige. Zumindest was das eigentliche Spiel angeht.
Das Menü kann direkt beim Starten geladen werden.
Bei Klassen, bei denen spätere Initialisierung nötig ist, baue ich eine Init-Funktion ein.
Das trifft nur auf die Screens zu.
Die Inititialisierung darf nur dann stattfinden wenn ein anderer Screen angezeigt werden soll.
Idee: Ich baue eine Funktion, die den Screen-Wechsel ausführt.
    Dazu nutze ich dann ein Boolean um zu signalisieren führe die FUnktion zum wechsel aus.
    Darauf prüfe ich dann in der jeweiligen Update Funktion.

[NOTE][TODO] Ich muss dringend daran denken, dass die gelinkten Libs von SFML aktuell im "Debug-Mode" geladen werden.
Die müssen später durch die Standard DLLs (ohne Zusatz von "d" zum Beispiel) ersetzt werden.

[TODO] Entities irgendwie kennzeichnen, erst habe ich mir überlegt, das mit einer Enum zu machen
Dabei war aber das Problem, dass das Enum EntityType Player enthielt und das mit der Klasse Player kolidiert.

# [30.03.17]